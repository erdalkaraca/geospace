import{j as l,F as p,k as m,m as h,x as c,n as C,d as u,e as v}from"./main-DJJFELAT.js";import{x as f}from"./index-CGmBFeLm.js";var g=Object.defineProperty,y=Object.getOwnPropertyDescriptor,d=(t,e,o,n)=>{for(var s=n>1?void 0:n?y(e,o):e,r=t.length-1,i;r>=0;r--)(i=t[r])&&(s=(n?i(e,o,s):i(s))||s);return n&&s&&g(e,o,s),s};c.registerEditorInputHandler({canHandle:t=>t instanceof p&&t.getName().toLowerCase().endsWith(".md"),handle:async t=>{const e={title:t.getName(),data:t,key:t.getName(),editorId:"md-editor",icon:"book",noOverflow:!1,state:{}};return e.widgetFactory=()=>f`
            <k-md-editor .input=${e}></k-md-editor>`,e},ranking:1e3});let a=class extends l{doClose(){this.input=void 0,this.mdContents=void 0}doBeforeUI(){this.loadContent()}async loadContent(){const t=this.input.data;if(t instanceof p){const e=await t.getContents();this.updateContents(e)}else if(typeof t=="string"&&t.startsWith("http")){const o=await(await fetch(t)).text();this.updateContents(o)}else typeof t=="string"&&this.updateContents(t)}render(){return f`
            <div style="max-height: 90vh;">${m(this.mdContents)}</div>`}updateContents(t){this.mdContents=h.parse(t)}};d([C({attribute:!1})],a.prototype,"input",2);d([u()],a.prototype,"mdContents",2);a=d([v("k-md-editor")],a);export{a as KMDEditor};
