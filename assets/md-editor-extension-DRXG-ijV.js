import{o as h,x as p,n as l,r as m,t as c}from"./index-CSVE5gI6.js";import{h as C,F as f,m as u,o as v}from"./main-hPM3xJPM.js";var g=Object.defineProperty,y=Object.getOwnPropertyDescriptor,d=(t,e,s,n)=>{for(var o=n>1?void 0:n?y(e,s):e,a=t.length-1,i;a>=0;a--)(i=t[a])&&(o=(n?i(e,s,o):i(o))||o);return n&&o&&g(e,s,o),o};v.registerEditorInputHandler({canHandle:t=>t instanceof f&&t.getName().toLowerCase().endsWith(".md"),handle:async t=>{const e={title:t.getName(),data:t,key:t.getName(),editorId:"md-editor",icon:"book",noOverflow:!1,state:{}};return e.widgetFactory=()=>p`
            <k-md-editor .input=${e}></k-md-editor>`,e},ranking:1e3});let r=class extends C{doClose(){this.input=void 0,this.mdContents=void 0}doBeforeUI(){this.loadContent()}async loadContent(){const t=this.input.data;if(t instanceof f){const e=await t.getContents();this.updateContents(e)}else if(typeof t=="string"&&t.startsWith("http")){const s=await(await fetch(t)).text();this.updateContents(s)}else typeof t=="string"&&this.updateContents(t)}render(){return p`
            <div style="max-height: 90vh;">${h(this.mdContents)}</div>`}updateContents(t){this.mdContents=u.parse(t)}};d([l({attribute:!1})],r.prototype,"input",2);d([m()],r.prototype,"mdContents",2);r=d([c("k-md-editor")],r);export{r as KMDEditor};
