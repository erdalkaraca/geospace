name: Auto Tag on Version Commit

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Extract version and create tag
        id: extract-version
        run: |
          # Get the commit subject and body
          COMMIT_SUBJECT=$(git log -1 --pretty=%s)
          COMMIT_BODY=$(git log -1 --pretty=%b)
          echo "Commit subject: $COMMIT_SUBJECT"
          
          # Extract version pattern (v0.12.9, v1.2.3, etc.)
          VERSION_WITH_V=$(echo "$COMMIT_SUBJECT" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          
          if [ -n "$VERSION_WITH_V" ]; then
            # Strip the 'v' prefix to get semantic version
            VERSION=${VERSION_WITH_V#v}
            echo "Found version in commit: $VERSION_WITH_V"
            echo "Creating tag: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
            # Save commit body for release notes (use multiline output)
            {
              echo "release_body<<EOF"
              echo "$COMMIT_BODY"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
            # Check if tag already exists
            if git rev-parse "$VERSION" >/dev/null 2>&1; then
              echo "Error: Tag $VERSION already exists!"
              exit 1
            fi
            
            # Create and push the tag (without 'v' prefix)
            git tag "$VERSION"
            git push origin "$VERSION"
            echo "Created and pushed tag: $VERSION"
            echo "This will trigger the build-and-deploy workflow"
          else
            echo "No version pattern found in commit message"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.extract-version.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract-version.outputs.version }}
          name: Release ${{ steps.extract-version.outputs.version }}
          body: ${{ steps.extract-version.outputs.release_body }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

